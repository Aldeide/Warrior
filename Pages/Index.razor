@page "/"
@using Microsoft.Extensions.Logging
@using Blazored.LocalStorage;
@using System.ComponentModel;
@using System.Reflection;
@using Warrior.Databases;

@inject IJSRuntime jsRuntime
@inject ILogger<Settings> Logger
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject Simulation simulation;
@inject HttpClient Http;

<EditForm EditContext="@editContext">
	<div class="sidebar summary" style="background-color: #20222e; background-image: none;">
		<Warrior.Shared.Component.Summary editContext=@editContext />
	</div>
	<section id="items">
		<div class="main" style="width: 100%;">
			<div class="content">
				<div class="container-fluid">
					<div class="d-flex align-items-start">
						<div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
							@foreach (ItemSlot slot in Enum.GetValues(typeof(ItemSlot)))
							{
								<button class="nav-link @(slot == ItemSlot.MainHand ? "active" : "")" id="v-pills-@(slot)-tab" data-bs-toggle="pill" data-bs-target="#v-pills-@slot" type="button" role="tab" aria-controls="v-pills-mainhand" aria-selected="true">@Utils.EnumUtils.GetDescription(slot)</button>
							}
						</div>
						<div class="tab-content" id="v-pills-tabContent">

							@foreach (ItemSlot slot in Enum.GetValues(typeof(ItemSlot)))
							{
								<div class="tab-pane fade show @(slot == ItemSlot.MainHand ? "active" : "")" id="v-pills-@slot" role="tabpanel" aria-labelledby="v-pills-@(slot)-tab">

									<h2>@Utils.EnumUtils.GetDescription(slot)</h2>

									@if (slot != ItemSlot.Neck && slot != ItemSlot.Trinket1 && slot != ItemSlot.Trinket2 && slot != ItemSlot.Ranged)
									{
										<a href="#" rel="spell=@simulation.settings.enchantSettings.enchants[slot].id" class="select-link"><div class="input-group mb-3">
										<span class="input-group-text" id="basic-addon1">Enchant</span>
										<select class="enchants"  @onchange="(e)=>EnchantSelected(e.Value, slot)">
										@foreach(Enchant enchant in Databases.EnchantDatabase.enchants)
										{
											if (slot == enchant.slot || enchant.id == 0 || (slot == ItemSlot.Ring2 && enchant.slot == ItemSlot.Ring1) || (slot == ItemSlot.OffHand && enchant.slot == ItemSlot.MainHand) ) {
													<option value="@enchant.id" selected="@(simulation.settings.enchantSettings.enchants[slot].id == enchant.id)">@enchant.name</option>
											}
										}
										</select>
										</div></a>
									}
									<br /><br />	
								
									@{int i = 0;}
									@foreach(var g in simulation.settings.equipmentSettings.GetGemSockets(slot))
									{
										
										int itemid = simulation.settings.equipmentSettings.GetItemBySlot(slot).id;
										selectedGems.Add(new List<Entities.Gem>() { simulation.settings.gemSettings.GetGemsByItemId(simulation.settings.equipmentSettings.GetItemBySlot(slot).id.ToString() + ":" + slot.ToString())[i] });
										<div class="input-group mb-3">
										<span class="input-group-text @GemColorClass(g.color.ToString())" id="basic-addon1">@g.color.ToString()</span>
										<select class="gem-slot select2" data-item="@itemid" data-slot="@i" data-item-slot="@slot" data-value="@simulation.settings.gemSettings.GetGemsByItemId(simulation.settings.equipmentSettings.GetItemBySlot(slot).id.ToString() + ":" + slot.ToString())[i].id">
												@if(g.color == Entities.Color.Meta)
												{
													@foreach(Entities.Gem gem in Databases.GemDatabase.gems.Where(g => g.color == Entities.Color.Meta)) {
												
												<option value="@gem.id">@gem.Description() [@gem.color.ToString()]</option>
											}	
												} else
												{
													@foreach(Entities.Gem gem in Databases.GemDatabase.gems.Where(g => g.color != Entities.Color.Meta)) {
												
												<option value="@gem.id">@gem.Description() [@gem.color.ToString()]</option>
											}	
												}
												
										</select>
										
										</div>
										i++;
									}
									@if (slot == ItemSlot.Waist && simulation.settings.enchantSettings.GetEnchant(slot).id == 55655)
									{
										int itemid = simulation.settings.equipmentSettings.GetItemBySlot(slot).id;
										<div class="input-group mb-3">
										<span class="input-group-text @GemColorClass("Prismatic")" id="basic-addon1">Prismatic</span>
										<select class="gem-slot select2" data-item="@itemid" data-slot="@i" data-item-slot="@slot" data-value="@simulation.settings.gemSettings.GetGemsByItemId(simulation.settings.equipmentSettings.GetItemBySlot(slot).id.ToString() + ":" + slot.ToString(), 1)[i].id">

													@foreach(Entities.Gem gem in Databases.GemDatabase.gems.Where(g => g.color != Entities.Color.Meta)) {
												
												<option value="@gem.id">@gem.Description() [@gem.color.ToString()]</option>
											}	

												
										</select>
										
										</div>
									}
									@if(Stats.DisplayStats.HasGems(simulation.settings, slot))
									{
										var socketBonus = Stats.DisplayStats.GetSocketBonus(simulation.settings, slot);
										if (socketBonus != null)
										{
											<p class="socket @SocketIsActive(Stats.DisplayStats.SocketBonusIsActive(simulation.settings, slot))">Socket bonus: +@socketBonus.Item2 @socketBonus.Item1.ToString()</p>
										}
									}
									@if(slot == ItemSlot.Head && Stats.DisplayStats.HasMetaGem(simulation.settings))
									{
										if (Stats.DisplayStats.MetaGemActive(simulation.settings))
										{
											<p class="socket @SocketIsActive(true)">Meta gem active</p>
										} else
										{
											<p class="socket">Meta gem inactive</p>
										}

									}
									
									<br /><br />
									<table>
										<thead>
											<tr>
												<td>Name</td>
												<td>Strength</td>
												<td>Agility</td>
												<td>Stamina</td>
												<td>Attack Power</td>
											</tr>
										</thead>
										@foreach (Item item in ItemDatabase.items)
										{
											if (item.itemSlot == slot ||
											(item.itemSlot == ItemSlot.MainHand && slot == ItemSlot.OffHand) ||
											(item.itemSlot == ItemSlot.Ring1 && slot == ItemSlot.Ring2) ||
											(item.itemSlot == ItemSlot.Trinket1 && slot == ItemSlot.Trinket2))
											{
												<tr class="@(item.id == simulation.settings.equipmentSettings.GetSlotId(slot) ? "equipped" : "")" @onclick="() => RowClicked(item.id, slot)">
													<td><a href="#" rel="item=@item.id" class="rowlink">@item.name</a></td>
													<td>@item.strength</td>
													<td>@item.agility</td>
													<td>@item.stamina</td>
													<td>@item.attackPower</td>
												</tr>
											}
										}
									</table>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>




	</section>
</EditForm>

@code {
	public EditContext? editContext;
	public ItemSlot currentTab { get; set; } = ItemSlot.MainHand;
	private List<List<Entities.Gem>> selectedGems = new List<List<Entities.Gem>> { };

	private static Action<int, string, int> _updateGem;

	protected override void OnInitialized()
	{
		var storedSettings = localStorage.GetItem<Warrior.Settings.Settings>("Settings");
		if (storedSettings != null)
		{
			simulation.settings = storedSettings;
		}
		editContext = new EditContext(simulation);
		editContext.OnFieldChanged += (sender, eventArgs) =>
		{
			Console.WriteLine("OnFieldChanged for FieldName = " + eventArgs.FieldIdentifier.FieldName + " " + sender.ToString());
			localStorage.SetItem("Settings", simulation.settings);
		};

		_updateGem = UpdateGem;

		base.OnInitialized();
	}

	private void UpdateGem(int gemId, string itemId, int slotId)
	{
		simulation.settings.gemSettings.SetGemForItemId(itemId, gemId, slotId);
		localStorage.SetItem("Settings", simulation.settings);
		InvokeAsync(() =>
				{

					StateHasChanged();
				});
	}

	public void RowClicked(int id, ItemSlot slot)
	{
		simulation.settings.equipmentSettings.EquipItem(slot, id);
		localStorage.SetItem("Settings", simulation.settings);
	}

	public void GemClicked(object value, string itemId, int index)
	{
		int id = ((Entities.Gem)value).id;
		simulation.settings.gemSettings.SetGemForItemId(itemId, id, index);
	}

	public void EnchantSelected(object value, ItemSlot slot)
	{
		if (value == null) {
			return;
		}
		simulation.settings.enchantSettings.SetEnchant(slot, Int32.Parse(value.ToString()));
		localStorage.SetItem("Settings", simulation.settings);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await jsRuntime.InvokeVoidAsync("renderjQueryComponents");
		await base.OnAfterRenderAsync(firstRender);
	}

	[JSInvokable]
	public static void UpdateGem(string value, string slot, string item, string itemslot)
	{
		Console.WriteLine("Gem Changed" + value + ":" + item + ":" + slot);
		_updateGem.Invoke(Int32.Parse(value), item + ":" + itemslot, Int32.Parse(slot));
	}

	private string SocketIsActive(bool isActive)
	{
		if (isActive)
		{
			return "socket-active";
		}
		return "";
	}

	private string GemColorClass(string color)
	{
		if (color == "Red") {
			return "red-gem";
		}
		if (color == "Blue") {
			return "blue-gem";
		}
		if (color == "Yellow") {
			return "yellow-gem";
		}
		if (color == "Meta") {
			return "meta-gem";
		}
		if (color == "Prismatic") {
			return "prismatic-gem";
		}
		return "";
	}
}






