@inject Simulation simulation;
@inject SimulationManager manager;
@page "/results"
<EditForm EditContext="@editContext">
<div class="sidebar summary" style="min-width: 300px; background-color: #20222e; background-image: none;">
<CascadingValue Value="this">
  <Warrior.Shared.Component.Summary editContext=@editContext />
</CascadingValue>
	
</div>
<div class="main" style="width: 100%;">
	<div class="content px-4">
		<div class="container-fluid">
			<div class="row">
				<div class="col-10">
					<section id="results">

						<h3>Results</h3>

						
						@if (simulation.simulationResults.combatDuration > 0 && simulation.simulationResults.numIterations > 0)
						{
							<p class="highlight"><span>DPS</span><br />
								@(Math.Round(simulation.simulationResults.totalDamage / simulation.simulationResults.combatDuration, 2))
								</p>
							<p class="highlight"><span>Total Damage</span><br />
								@(Math.Round(simulation.simulationResults.totalDamage, 0))
								</p>
						<h3>Melee Attacks</h3>
						<table>
							<thead>
								<tr>
									<td>
									</td>
									<td>
										DPS
									</td>
									<td>
										Damage
									</td>
									<td>
										Casts
									</td>
									<td>
										Hit
									</td>
									<td>
										Crit
									</td>
									<td>
										Glance
									</td>
									<td>
										Miss
									</td>
									<td>
										Dodge
									</td>
								</tr>
							</thead>
							<tr>
								<td>
									Melee (Main Hand)
								</td>
								<td>
									@(Math.Round(simulation.simulationResults.mainHand.totalDamage / (float)simulation.settings.simulationSettings.combatLength,2))
								</td>
								<td>@(Math.Round(simulation.simulationResults.mainHand.totalDamage))</td>
								<td>
									@(simulation.simulationResults.mainHand.numCasts)
								</td>
								<td>
									@(simulation.simulationResults.mainHand.numHit)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.mainHand.numHit / (double)simulation.simulationResults.mainHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.mainHand.numCrit)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.mainHand.numCrit / (double)simulation.simulationResults.mainHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.mainHand.numGlancing)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.mainHand.numGlancing / (double)simulation.simulationResults.mainHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.mainHand.numMiss)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.mainHand.numMiss / (double)simulation.simulationResults.mainHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.mainHand.numDodge)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.mainHand.numDodge / (double)simulation.simulationResults.mainHand.numCasts * 100, 2)) %)</span>
								</td>
							</tr>
							<tr>
								<td>
									Melee (Off Hand)
								</td>
								<td>
									@(Math.Round(simulation.simulationResults.offHand.totalDamage / (float)simulation.settings.simulationSettings.combatLength, 2))
								</td>
								<td>@(Math.Round(simulation.simulationResults.offHand.totalDamage))</td>
								<td>
									@(simulation.simulationResults.offHand.numCasts)
								</td>
								<td>
									@(simulation.simulationResults.offHand.numHit)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.offHand.numHit / (double)simulation.simulationResults.offHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.offHand.numCrit)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.offHand.numCrit / (double)simulation.simulationResults.offHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.offHand.numGlancing)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.offHand.numGlancing / (double)simulation.simulationResults.offHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.offHand.numMiss)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.offHand.numMiss / (double)simulation.simulationResults.offHand.numCasts * 100, 2)) %)</span>
								</td>
								<td>
									@(simulation.simulationResults.offHand.numDodge)
									<span class="lowlight">(@(Math.Round(simulation.simulationResults.offHand.numDodge / (double)simulation.simulationResults.offHand.numCasts * 100, 2)) %)</span>
								</td>
							</tr>

						</table>


						<h3>Abilities</h3>
						<table>
							<thead>
								<tr>
									<td>
									</td>
									<td>
										DPS
									</td>
									<td>
										Damage
									</td>
									<td>
										Casts
									</td>
									<td>
										Hit
									</td>
									<td>
										Crit
									</td>
									<td>
										Miss
									</td>
									<td>
										Dodge
									</td>
								</tr>
							</thead>
							@foreach (var abilitySummary in simulation.simulationResults.abilitySummaries)
							{
								<tr>
									<td>
										@abilitySummary.name
									</td>
									<td>
										@(Math.Round(abilitySummary.totalDamage / (float)simulation.settings.simulationSettings.combatLength, 2) )
									</td>
									<td>
										@(abilitySummary.totalDamage )
									</td>
									<td>
										@(abilitySummary.numCasts )
									</td>
									<td>
										@(abilitySummary.numHit  )
									</td>
									<td>
										@(abilitySummary.numCrit)
									</td>
									<td>
										@(abilitySummary.numMiss)
									</td>
									<td>
										@(abilitySummary.numDodge)
									</td>
								</tr>
							}
						</table>

						<h3>Auras</h3>
						<table>
							<thead>
								<tr>
									<td>
									</td>
									<td>
										Uptime (s)
									</td>
									<td>
										Procs / Uses
									</td>
									<td>
										Refreshes
									</td>
								</tr>
							</thead>
							@foreach (var auraSummary in simulation.simulationResults.auraSummaries)
							{
								<tr>
									<td>
										@auraSummary.name
									</td>
									<td>
										@(Math.Round(auraSummary.uptime / (double)Constants.kStepsPerSecond, 2)) (@(Math.Round(auraSummary.uptime / (double)Constants.kStepsPerSecond / (double)simulation.settings.simulationSettings.combatLength * 100, 2)) %)
									</td>
									<td>
										@(auraSummary.procs  )
									</td>
									<td>
										@(auraSummary.refreshes )
									</td>
								</tr>
							}
						</table>

						<h3>Damage over Time</h3>
						<table>
							<thead>
								<tr>
									<td>
									</td>
									<td>
										DPS
									</td>
									<td>
										Damage
									</td>
									<td>
										Uptime (s)
									</td>
									<td>
										Ticks
									</td>
									<td>
										Average Tick
									</td>
									<td>
										Applications
									</td>
									<td>
										Refreshes
									</td>
								</tr>
							</thead>
							@foreach (var summary in simulation.simulationResults.dotSummaries)
							{
								<tr>
									<td>
										@summary.name
									</td>
									<td>
										@(Math.Round((double)(summary.totalDamage / (double)simulation.settings.simulationSettings.combatLength), 2))
									</td>
									<td>
										@(Math.Round((float)summary.totalDamage, 2))
									</td>
									<td>
										@(Math.Round((float)summary.uptime / Constants.kStepsPerSecond, 2))  (@(Math.Round((double)(summary.uptime / Constants.kStepsPerSecond / (double)simulation.settings.simulationSettings.combatLength * 100), 2)) %)
									</td>
									<td>
										@(summary.ticks)
									</td>
									<td>
												@if (summary.ticks > 0)
												{
													@(Math.Round((double)(summary.totalDamage / ((summary.ticks))), 2))
												}
											</td>
									<td>
										@(summary.applications)
									</td>
									<td>
										@(summary.refreshes)
									</td>
								</tr>
							}
						</table>
						<h3>Stances</h3>
						<table>
							<thead>
								<tr>
									<td>
										
									</td>
									<td>
										Uptime (s)
									</td>
								</tr>
							</thead>
								<tr>
									<td>
										@simulation.simulationResults.battleStanceResults.name
									</td>
									<td>
										@Math.Round(simulation.simulationResults.battleStanceResults.uptime / 1000d, 2)
									</td>
								</tr>
								<tr>
									<td>
										@simulation.simulationResults.berserkerStanceResults.name
									</td>
									<td>
										@Math.Round(simulation.simulationResults.berserkerStanceResults.uptime / 1000d, 2)
									</td>
								</tr>
								<tr>
									<td>
										@simulation.simulationResults.defensiveStanceResults.name
									</td>
									<td>
										@Math.Round(simulation.simulationResults.defensiveStanceResults.uptime / 1000d, 2)
									</td>
								</tr>
						</table>
						<h3>Rage Management</h3>

						<table>
							<thead>
								<tr>
									<td>
										Source
									</td>
									<td>
										Rage
									</td>
									<td>
										Ticks
									</td>
								</tr>
							</thead>
							@foreach (var rage in simulation.simulationResults.rageSummary.generated)
							{
								<tr>
									<td>
										@rage.Key
									</td>
									<td>
										@rage.Value
									</td>
									<td>
										@simulation.simulationResults.rageSummary.ticks[rage.Key]
									</td>
								</tr>
							}
						</table>

						} else {
							<p>No results to display.</p>
						}


					</section>
				</div>
			</div>
		</div>
	</div>
</div>
</EditForm>

@code {
	public EditContext? editContext;
	protected override void OnInitialized()
	{
		editContext = new EditContext(simulation);
		editContext.OnFieldChanged += (sender, eventArgs) =>
		{
			Console.WriteLine("OnFieldChanged for FieldName = " + eventArgs.FieldIdentifier.FieldName + " " + sender.ToString());
		};
		manager.Completed += SimulationCompleted;
		base.OnInitialized();
	}

	public void RefreshState()
	{
		this.StateHasChanged();
	}

	public void SimulationCompleted(object sender, EventArgs e)
	{
		RefreshState();
	}
}
