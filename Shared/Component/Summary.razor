@using BlazorWorker.Core
@using Warrior.Stats
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.WorkerBackgroundService 
@using System.Text.Json;
@using System.Text.Json.Serialization;

@inject Simulation simulation;
@inject SimulationManager manager;
@inject IWorkerFactory workerFactory

<p style="text-align: center">
	<a href="https://github.com/aldeide/Warrior">Under development</a>
	<br /><br />
	@simulation.settings.characterSettings.race Warrior
</p>
<div>
	<div class="align-left lowlight">
		Strength
	</div>
	<div class="align-right">
		@DisplayStats.DisplayStrength(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Agility
	</div>
	<div class="align-right">
		@DisplayStats.DisplayAgility(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Stamina
	</div>
	<div class="align-right">
		@DisplayStats.DisplayStamina(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Health
	</div>
	<div class="align-right">
		@DisplayStats.DisplayHealth(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmor(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Attack Power
	</div>
	<div class="align-right">
		@DisplayStats.DisplayAttackPower(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor Penetration Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmorPenetrationRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Haste Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayHasteRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Crit Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayCriticalStrikeRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Expertise Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayExpertiseRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor Penetration (%)
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmorPenetration(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Melee Critical Chance (%)
	</div>
	<div class="align-right">
		@DisplayStats.DisplayCriticalChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Melee Haste
	</div>
	<div class="align-right">
		@DisplayStats.DisplayMeleeHaste(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<br /><br />
Debug
<br /><br />
<div>
	<div class="align-left">
		Glancing Chance
	</div>
	<div class="align-right">
		@AttackTableUtils.ComputeGlancingChance(simulation.settings.simulationSettings.targetLevel)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		White Miss Chance
	</div>
	<div class="align-right">
		@DisplayStats.DisplayWhiteMissChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Dodge Chance
	</div>
	<div class="align-right">
		@DisplayStats.DisplayDodgeChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Extra Hit
	</div>
	<div class="align-right">
		@DisplayStats.DisplayExtraHitChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Enemy Effective Armor
	</div>
	<div class="align-right">
		@DisplayStats.DisplayEnemyEffectiveArmor(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Enemy Armor reduction
	</div>
	<div class="align-right">
		@DisplayStats.DisplayEnemyDamageMultiplier(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>


<br /><br />

<div style="text-align:center;">

<EditForm EditContext="@buttonEditContext" OnValidSubmit="@Simulate">
	<button type="submit" class="btn btn-primary" disabled=@buttonInactive value="Save">Simulate</button>
</EditForm>

<br />
	@if(simulation.simulationResults.combatDuration > 0)
	{
		dps = (Math.Round(simulation.simulationResults.totalDamage / simulation.simulationResults.combatDuration, 2)).ToString();
	} else
	{
		dps = "";
	}

	@if (manager.isRunning)
		{
			<span class="highlight dps">@Math.Round((float)manager.simulationProgress.Select(a => a.dps).Average(), 2)</span>
			<div class="progress smallprogress mt-2">
                <div id="progressbar" class="progress-bar progress-bar-animated" style="width: @Math.Round((float)manager.simulationProgress.Select(a => a.progress).Average())%; background-color: #204066;"></div>
            </div>
		} else
		{
			<span class="highlight">@dps</span>
		}

	
@if (buttonInactive && !manager.ready) {
	<p class="btn-info-label">Initializing workers</p>
}
@if (buttonInactive && manager.isRunning) {
	<p class="btn-info-label">Computing</p>
}
	

</div>



@code {
	[Parameter]
	public EditContext? editContext { get; set; }
	public EditContext? buttonEditContext { get; set; }
	[CascadingParameter]
	public Warrior.Pages.Results? _Parent { get; set; }

	public string dps { get; set; } = "";
	private int numWorkers = 10;
	List<IWorker> workers = new List<IWorker>();
	List<IWorkerBackgroundService<Simulation>> backgroundServices =
				new List<IWorkerBackgroundService<Simulation>>();
	List<ProgressRef> piProgress = new List<ProgressRef>();

	bool buttonInactive = true;

	protected override async void OnInitialized() {
		buttonInactive = !manager.ready;
		if (manager.isRunning)
		{
			buttonInactive = true;
		}
		buttonEditContext = new EditContext(manager);
		manager.Ready += ManagerIsReady;
		manager.Completed += SimulationCompleted;
		manager.Updated += SimulationUpdated;
		base.OnInitialized();
	}

	private void ManagerIsReady(object sender, EventArgs e) {
		Console.WriteLine("Manager ready");
		buttonInactive = false;
		StateHasChanged();
		return;
	}

	private void SimulationCompleted(object sender, EventArgs e)
	{
		dps = (Math.Round(simulation.simulationResults.totalDamage / simulation.simulationResults.combatDuration, 2)).ToString();
		StateHasChanged();
	}

	private void SimulationUpdated(object sender, EventArgs e)
	{
		StateHasChanged();
	}

	private async Task Simulate() {

		if (manager.ready && !manager.isRunning) {
			manager.isRunning = true;
			buttonInactive = true;
			manager.ResetProgress();
			StateHasChanged();
			var settings = simulation.settings;
			string config = JsonSerializer.Serialize(settings);
			int iterationsPerWorker = (int)Math.Floor((float)simulation.settings.simulationSettings.numIterations / numWorkers);
			var allTasks = new List<Task<Warrior.Results.SimulationResults>>();
			var servicesStarted = 0;

			foreach (var backgroundService in manager.backgroundServices.Take(manager.numWorkers))
			{
				var task = backgroundService.RunAsync(s => s.SimulateWithSettings(config, iterationsPerWorker));
				allTasks.Add(task);
				servicesStarted++;
			}

			var result = await Task.WhenAll(allTasks.ToArray()).ContinueWith(t =>
			{
				return t.Result;
			});

			float dpsResults = 0;
			dpsResults /= numWorkers;
			Warrior.Results.SimulationResults simulationResults = new Warrior.Results.SimulationResults();
			simulationResults.Populate(result.ToList());

			simulation.simulationResults = simulationResults;
			manager.isRunning = false;
			buttonInactive = false;
			manager.NotifyCompletion();
		}
		// TODO: average results.
		//simulation.simulationResults = result[0];

		if (_Parent != null)
		{
			_Parent.RefreshState();
		}

		/*
		simulation.Simulate();
		dps = Math.Round(simulation.simulationResults.totalDamage / simulation.settings.simulationSettings.combatLength).ToString();
		if (_Parent != null)
			{
			_Parent.RefreshState();
		}
		*/
	}

	private bool ButtonDisableState() {
		if (manager.isRunning || !manager.ready)
		{
			return true;
		}
		return false;
	}
}
