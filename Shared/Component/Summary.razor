@using BlazorWorker.Core
@using Warrior.Stats
@using BlazorWorker.BackgroundServiceFactory
@using System.Text.Json;
@using System.Text.Json.Serialization;

@inject Simulation simulation;
@inject IWorkerFactory workerFactory

<p style="text-align: center">
	<a href="https://github.com/aldeide/Warrior">Under development</a>
	<br /><br />
	@simulation.settings.characterSettings.race Warrior
</p>
<div>
	<div class="align-left lowlight">
		Strength
	</div>
	<div class="align-right">
		@DisplayStats.DisplayStrength(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Agility
	</div>
	<div class="align-right">
		@DisplayStats.DisplayAgility(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Stamina
	</div>
	<div class="align-right">
		@DisplayStats.DisplayStamina(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Health
	</div>
	<div class="align-right">
		@DisplayStats.DisplayHealth(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmor(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<div>
	<div class="align-left lowlight">
		Attack Power
	</div>
	<div class="align-right">
		@DisplayStats.DisplayAttackPower(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor Penetration Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmorPenetrationRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Haste Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayHasteRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Crit Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayCriticalStrikeRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Expertise Rating
	</div>
	<div class="align-right">
		@DisplayStats.DisplayExpertiseRating(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Armor Penetration (%)
	</div>
	<div class="align-right">
		@DisplayStats.DisplayArmorPenetration(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Melee Critical Chance (%)
	</div>
	<div class="align-right">
		@DisplayStats.DisplayCriticalChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left lowlight">
		Melee Haste
	</div>
	<div class="align-right">
		@DisplayStats.DisplayMeleeHaste(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>
<br /><br />
Debug
<br /><br />
<div>
	<div class="align-left">
		Glancing Chance
	</div>
	<div class="align-right">
		@AttackTableUtils.ComputeGlancingChance(simulation.settings.simulationSettings.targetLevel)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		White Miss Chance
	</div>
	<div class="align-right">
		@DisplayStats.DisplayWhiteMissChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Dodge Chance
	</div>
	<div class="align-right">
		@DisplayStats.DisplayDodgeChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Extra Hit
	</div>
	<div class="align-right">
		@DisplayStats.DisplayExtraHitChance(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Enemy Effective Armor
	</div>
	<div class="align-right">
		@DisplayStats.DisplayEnemyEffectiveArmor(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>

<div>
	<div class="align-left">
		Enemy Armor reduction
	</div>
	<div class="align-right">
		@DisplayStats.DisplayEnemyDamageMultiplier(simulation.settings)
	</div>
</div>
<div style="clear:both"></div>


<br /><br />

<div style="text-align:center;">
<EditForm EditContext="@editContext" OnValidSubmit="@Simulate">
	<button type="submit" class="btn btn-primary" value="Save">Simulate</button>
</EditForm>
<br />
<span class="highlight">@dps</span>
</div>



@code {
	[Parameter]
	public EditContext? editContext { get; set; }

	[CascadingParameter]
	public Warrior.Pages.Results? _Parent { get; set; }

	public string dps { get; set; } = "";

	protected override void OnInitialized() => base.OnInitialized();

	private async Task Simulate() {

		// Create worker.
		var worker = await workerFactory.CreateAsync();

		// Create service reference. For most scenarios, it's safe (and best) to keep this 
		// reference around somewhere to avoid the startup cost.
		var service = await worker.CreateBackgroundServiceAsync<Simulation>( options => options
					.AddAssemblies("Warrior.dll")
					.AddAssemblies("System.Text.Json.dll")
					.AddAssemblies("System.Text.Encodings.Web.dll")
		); 

		// Reference that live outside of the current scope should not be passed into the expression.
		// To circumvent this, create a scope-local variable like this, and pass the local variable.
		Settings.Settings settings = this.simulation.settings;

		string jsonString = JsonSerializer.Serialize(settings);
		Console.WriteLine(jsonString);

		Settings.Settings settings2 = JsonSerializer.Deserialize<Settings.Settings>(jsonString);

		var result = await service.RunAsync(s => s.SimulateWithSettings(jsonString));

		simulation.simulationResults = result;

		dps = result.dps.ToString();
		if (_Parent != null)
		{
			_Parent.RefreshState();
		}
		/*
		simulation.Simulate();
		dps = Math.Round(simulation.simulationResults.totalDamage / simulation.settings.simulationSettings.combatLength).ToString();
		if (_Parent != null)
		{
			_Parent.RefreshState();
		}
		*/
	}
}
